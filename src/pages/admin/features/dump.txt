
import React, { useState, useEffect } from 'react';
import AdminLayout from '../../../layouts/adminLayout';
import { Drawer, Toolbar, List } from '@mui/material';
import Box from '@mui/material/Box';
import CssBaseline from '@mui/material/CssBaseline';
import AppBar from '@mui/material/AppBar';
import Typography from '@mui/material/Typography';
import Divider from '@mui/material/Divider';
import ListItem from '@mui/material/ListItem';
import ListItemButton from '@mui/material/ListItemButton';
import ListItemIcon from '@mui/material/ListItemIcon';
import ListItemText from '@mui/material/ListItemText';
import InboxIcon from '@mui/icons-material/MoveToInbox';
import MailIcon from '@mui/icons-material/Mail';
import { Grid } from '@mui/material';

const AirbnbHostSettings = () => {
  const [hostCost, setHostCost] = useState(0);
  const [subscriptionActive, setSubscriptionActive] = useState(false);
  const [selectedRegion, setSelectedRegion] = useState('global');
  const [selectedCurrency, setSelectedCurrency] = useState('USD');
  const [selectedTimeZone, setSelectedTimeZone] = useState('UTC');
  const [currentSettings, setCurrentSettings] = useState(null);
  const drawerWidth = 240;

  useEffect(() => {
    // Fetch settings when any of the filter options change
    fetchSettings();
  }, [hostCost, subscriptionActive, selectedRegion, selectedCurrency, selectedTimeZone]);

  const fetchSettings = async () => {
    // Simulate fetching settings from the server based on the selected region
    // You can replace this with actual API calls to get region-specific data
    const regionSettings = getRegionSpecificSettings(selectedRegion);

    // Update the currentSettings state with fetched settings
    setCurrentSettings({
      hostCost,
      subscriptionActive,
      selectedCurrency,
      selectedTimeZone,
      ...regionSettings,
    });
  };

  const getRegionSpecificSettings = (region) => {
    switch (region) {
      case 'australia':
        return {
          availableCurrencies: ['AUD', 'NZD'],
          availableTimeZones: ['Australia/Sydney', 'Australia/Melbourne'],
        };
      // Add more cases for other regions as needed
      default:
        // Global settings
        return {
          availableCurrencies: ['USD', 'EUR'],
          availableTimeZones: ['UTC', 'GMT'],
        };
    }
  };

  useEffect(() => {
    // Fetch settings when any of the filter options change
    fetchSettings();
  }, [hostCost, subscriptionActive, selectedRegion, selectedCurrency, selectedTimeZone]);


  const handleRegionChange = (e) => {
    const region = e.target.value;
    setSelectedRegion(region);

    // Reset currency and time zone when region changes
    setSelectedCurrency('USD');
    setSelectedTimeZone('UTC');
  };


    return (
      <>
        <AdminLayout title={"Hosting Cost Setup"}>
          <Box sx={{ display: 'flex' }}>
            {/* Sidebar */}
            <Box
              sx={{
                width: drawerWidth,
                flexShrink: 0,
                p: 3,
              }}
            >
              {/* Your Sidebar content here */}
              <div>
                <h2>Airbnb Host Settings</h2>
                <label>
                  Host Cost per Property:
                  <input
                    type="number"
                    value={hostCost}
                    onChange={(e) => setHostCost(parseFloat(e.target.value))}
                  />
                </label>
  
                <label>
                  Activate Subscription:
                  <input
                    type="checkbox"
                    checked={subscriptionActive}
                    onChange={() => setSubscriptionActive(!subscriptionActive)}
                  />
                </label>
  
                <label>
                  Select Region:
                  <select value={selectedRegion} onChange={handleRegionChange}>
                    <option value="global">Global</option>
                    <option value="australia">Australia</option>
                    {/* Add more regions as needed */}
                  </select>
                </label>
  
                <label>
                  Select Currency:
                  <select
                    value={selectedCurrency}
                    onChange={(e) => setSelectedCurrency(e.target.value)}
                  >
                    {currentSettings?.availableCurrencies.map((currency) => (
                      <option key={currency} value={currency}>
                        {currency}
                      </option>
                    ))}
                  </select>
                </label>
  
                <label>
                  Select Time Zone:
                  <select
                    value={selectedTimeZone}
                    onChange={(e) => setSelectedTimeZone(e.target.value)}
                  >
                    {currentSettings?.availableTimeZones.map((timeZone) => (
                      <option key={timeZone} value={timeZone}>
                        {timeZone}
                      </option>
                    ))}
                  </select>
                </label>
              </div>
            </Box>
  
            {/* Main Content */}
            <Box
              component="main"
              sx={{ flexGrow: 1, bgcolor: 'background.default', p: 3 }}
            >
              {/* Your main content here */}
              <div>
                <h3>Current Settings:</h3>
                <p>Host Cost: {currentSettings?.hostCost}</p>
                <p>Subscription Active: {currentSettings?.subscriptionActive ? 'Yes' : 'No'}</p>
                <p>Currency: {currentSettings?.selectedCurrency}</p>
                <p>Time Zone: {currentSettings?.selectedTimeZone}</p>
              </div>
            </Box>
          </Box>
        </AdminLayout>
      </>
    );
  };
  
  export default AirbnbHostSettings;
  


    // const getRegionSpecificSettings = (region) => {
  //   switch (region) {
  //     case "australia":
  //       return {
  //         availableCurrencies: ["AUD", "NZD"],
  //         availableTimeZones: ["Australia/Sydney", "Australia/Melbourne"],
  //       };
  //     default:
  //       // Global settings
  //       return {
  //         availableCurrencies: ["USD", "EUR"],
  //         availableTimeZones: ["UTC", "GMT"],
  //       };
  //   }
  // };







  // import { useState, useEffect } from "react";
// import axios from "axios";
// import {
//   Table,
//   TableBody,
//   TableCell,
//   TableHead,
//   TableRow,
//   Typography,
//   TextField,
//   Button,
//   CircularProgress,
//   Box,
// } from "@mui/material";

// const CategoryComponent = () => {
//   const [categories, setCategories] = useState([]);
//   const [newCategory, setNewCategory] = useState("");
//   const [loading, setLoading] = useState(true);

//   useEffect(() => {
//     fetchCategories();
//   }, []);

//   const fetchCategories = async () => {
//     try {
//       const response = await axios.get("/category");
//       setCategories(response.data.category);
//       setLoading(false);
//     } catch (error) {
//       console.error("Error fetching categories:", error);
//     }
//   };

//   const handleAddCategory = async () => {
//     try {
//       await axios.post("/category", {
//         title: newCategory,
//         icon: "default",
//         type: "describe",
//       });
//       fetchCategories();
//       setNewCategory("");
//     } catch (error) {
//       console.error("Error adding category:", error);
//     }
//   };

//   const handleDeleteCategory = async (id) => {
//     try {
//       await axios.delete(`/category/${id}`);
//       fetchCategories();
//     } catch (error) {
//       console.error("Error deleting category:", error);
//     }
//   };

//   return (
//     <Box paddingInline={1}>
//       <Box marginBlock={3}>
//         <Typography variant="h4" align="left" gutterBottom>
//           Categories
//         </Typography>
//       </Box>
//       <Table>
//         <TableHead style={{ backgroundColor: "#f0f0f0" }}>
//           <TableRow>
//             <TableCell>Title</TableCell>
//             <TableCell>Icon</TableCell>
//             <TableCell>Type</TableCell>
//             <TableCell>Action</TableCell>
//           </TableRow>
//         </TableHead>
//         <TableBody>
//           {loading ? (
//             <TableRow>
//               <TableCell colSpan={4} align="center">
//                 <CircularProgress />
//               </TableCell>
//             </TableRow>
//           ) : (
//             categories.map((category) => (
//               <TableRow key={category._id}>
//                 <TableCell>{category.title}</TableCell>
//                 <TableCell>{category.icon}</TableCell>
//                 <TableCell>{category.type}</TableCell>
//                 <TableCell>
//                   <Button
//                     variant="outlined"
//                     color="error"
//                     onClick={() => handleDeleteCategory(category._id)}
//                   >
//                     Delete
//                   </Button>
//                 </TableCell>
//               </TableRow>
//             ))
//           )}
//         </TableBody>
//       </Table>

//       <Box marginBlock={3}>
//         <Typography variant="h5" align="center" gutterBottom>
//           Add New Category
//         </Typography>
//         <Box style={{ display: "flex", justifyContent: "center" }}>
//           <TextField
//             label="Category Title"
//             value={newCategory}
//             onChange={(e) => setNewCategory(e.target.value)}
//             variant="outlined"
//           />
//           <Button
//             variant="contained"
//             color="primary"
//             onClick={handleAddCategory}
//             style={{ marginLeft: "10px" }}
//           >
//             Add Category
//           </Button>
//         </Box>
//       </Box>
//     </Box>
//   );
// };

// export default CategoryComponent;